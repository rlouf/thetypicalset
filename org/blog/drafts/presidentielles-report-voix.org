#+TITLE: Estimer le report des voix aux présidentielles
#+DATE: <2022-06-13 Mon>

Cet article fait suite au [[https://github.com/laurentperrinet/2022-05-04_transfert-des-voix/blob/main/2022-06-08_transfert-des-voix.ipynb][travail de Laurent Perrinet]] sur les reports de voix entre le premier et le deuxième tour des élections présidentielles en 2022. La démarche de ce travail est intéressante (et autant que je sache originale) : elle consiste à prendre les résultats des élections au niveau des bureaux de vote aux deux tours, et essayer d'estimer une matrice de transition i.e. la probabilité que quelqu'un ayant voté pour X (par exemple Fabien Roussel) vote pour Y (par exemple Marine Le Pen) au second tour.

Le modèle utilisé est déterministe. Il est implémenté avec PyTorch:

#+begin_src python
import torch
from torch.utils.data import TensorDataset, DataLoader, random_split
import torch.nn.functional as F

torch.set_default_tensor_type("torch.FloatTensor")

class TransfertVoix(torch.nn.Module):
    def __init__(self, N_1er, N_2eme):#, device=None):
        super(TransfertVoix, self).__init__()
        self.lin = torch.nn.Linear(N_2eme, N_1er, bias=False)

    def forward(self, p_1):
        M = torch.softmax(self.lin.weight, axis=1)
        p_2_pred = torch.matmul(p_1, M)
        return p_2_pred
#+end_src

A première lecture des résultats et au vu du modèle ci-dessus plusieurs pistes d'amélioration me viennent en tête:
1. L'auteur montre les corrélations entre le vote Mélenchon au premier tour, et celui de Macron au second tour. Les distributions marginales sont très étalées. Je m'attend à une variabilité encore plus grande pour les candidats avec un score moindre. Cette variabilité peut avoir un effet non-négligeable sur les résultats; je suis par exemple surpris des forts reports vers Le Pen calculés pour Arthaud, Poutou et Roussel. Ce n'est pas à exclure, certes, mais je pense que l'on bénéficierait d'une approche bayésienne et bénéficier d'une marge d'erreur sur ces résultats;
2. L'hypothèse d'un report uniforme sur tout le territoire me parait également osée. On devrait envisager un modèle hiérarchique;
3. Les sondages de sortie d'urne peuvent servir pour définir le prior (hyperprior dans le cas d'un modèle hiérarchique).

#+begin_src python :session :result silent
import os
import numpy as np
import pandas as pd
#+end_src

#+RESULTS:

* Les données

On se placera ici à l'échelle de la circonscription législative. Le découpage à l'échelle du bureau de vote est intéressant, mais le but implicite de cette étude est de donner une idée des reports de voix pour le second tour des législatives 2022. J'utilise ici le code de [[https://github.com/laurentperrinet/2022-05-04_transfert-des-voix/blob/main/2022-06-08_transfert-des-voix.ipynb][Laurent Perrinet]] en le modifiant (les erreurs éventuelles sont de mon fait).

** Premier tour


#+begin_src python :session :results silent
fname = '/tmp/T1.xlsx'

if not os.path.isfile(fname):
    url = "https://www.data.gouv.fr/fr/datasets/r/1a35594a-99f2-4257-87e0-ec2f55039276"
    import urllib.request
    urllib.request.urlretrieve(url, fname)

T1 = pd.read_excel(fname)
#+end_src


#+begin_src python :session
T1.tail()
#+end_src

#+RESULTS:
:     Code du département           Libellé du département  Code de la circonscription Libellé de la circonscription Etat saisie  ...    Unnamed: 98  Unnamed: 99  Unnamed: 100  Unnamed: 101  Unnamed: 102
: 572                  ZZ  Français établis hors de France                           7          7ème circonscription     Complet  ...  DUPONT-AIGNAN      Nicolas           639          0.52          1.23
: 573                  ZZ  Français établis hors de France                           8          8ème circonscription     Complet  ...  DUPONT-AIGNAN      Nicolas           300          0.23          1.28
: 574                  ZZ  Français établis hors de France                           9          9ème circonscription     Complet  ...  DUPONT-AIGNAN      Nicolas           381          0.31          0.97
: 575                  ZZ  Français établis hors de France                          10         10ème circonscription     Complet  ...  DUPONT-AIGNAN      Nicolas           530          0.51          1.33
: 576                  ZZ  Français établis hors de France                          11         11ème circonscription     Complet  ...  DUPONT-AIGNAN      Nicolas           595          0.60          1.58
:
: [5 rows x 103 columns]

#+begin_src python :session
df_1 = T1[['Nuls', 'Blancs', 'Abstentions']].copy()
T1['Code de la circonscription'] = T1['Code de la circonscription'].apply(str)
#df_1['circonscription'] = T1['Code du département'] + T1['Code de la circonscription']
df_1.head()
#+end_src

#+RESULTS:
:    Nuls  Blancs  Abstentions
: 0   393    1154        18592
: 1   352    1367        19917
: 2   290     851        20440
: 3   474    1299        19826
: 4   394     970        18766


#+begin_src python :session :results silent
col_start = 21
col_par_cdt = 7
candidats = T1.iloc[0][col_start::col_par_cdt]

for i_candidat, candidat in enumerate(candidats):
    i_col = col_start + i_candidat*col_par_cdt + 2
    print('# colonne', i_col, ' résultats=', T1.iloc[:, i_col].values)
    df_1[candidat] = T1.iloc[:, i_col].values
#+end_src


Let's check the results by plotting the distribution of votes:

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(13, 5))
k = df_1.sum()/df_1.sum().sum()
ax = k.plot.bar(ax=ax)
ax.set_xlabel('Choix 1er tour')
ax.set_ylabel('Pourcentage');
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src


#+RESULTS:
[[file:/tmp/babel-XyHH31/figureFeRI5l.png]]

** Deuxième tour

#+begin_src python :session :results silent
fname = '/tmp/T2.xlsx'

if not os.path.isfile(fname):
    url = "https://www.data.gouv.fr/fr/datasets/r/5eacdbc7-b1a2-440c-8eef-09c8bfb87609"
    import urllib.request
    urllib.request.urlretrieve(url, fname)

T2 = pd.read_excel(fname)
#+end_src


#+begin_src python :session
T2.tail()
#+end_src

#+RESULTS:
:     Code du département           Libellé du département  Code de la circonscription Libellé de la circonscription Etat saisie  Inscrits  ...  Unnamed: 27  Unnamed: 28  Unnamed: 29  Unnamed: 30  Unnamed: 31  Unnamed: 32
: 572                  ZZ  Français établis hors de France                           7          7ème circonscription     Complet    122145  ...            F       LE PEN       Marine         4987         4.08         8.58
: 573                  ZZ  Français établis hors de France                           8          8ème circonscription     Complet    130068  ...            F       LE PEN       Marine         3345         2.57        14.02
: 574                  ZZ  Français établis hors de France                           9          9ème circonscription     Complet    121013  ...            F       LE PEN       Marine         4988         4.12        13.28
: 575                  ZZ  Français établis hors de France                          10         10ème circonscription     Complet    104829  ...            F       LE PEN       Marine         8085         7.71        20.39
: 576                  ZZ  Français établis hors de France                          11         11ème circonscription     Complet     98707  ...            F       LE PEN       Marine         7246         7.34        18.88
:
: [5 rows x 33 columns]

#+begin_src python :session
df_2 = T2[['Nuls', 'Blancs', 'Abstentions']].copy()
T2['Code de la circonscription'] = T2['Code de la circonscription'].apply(str)
#df_1['circonscription'] = T1['Code du département'] + T1['Code de la circonscription']
df_2.head()
#+end_src

#+RESULTS:
:    Nuls  Blancs  Abstentions
: 0  1229    4020        20298
: 1  1189    4430        23236
: 2   880    3478        23138
: 3  1324    4082        21870
: 4  1253    3792        21026

#+begin_src python :session :results silent
col_start = 21
col_par_cdt = 7
candidats = T2.iloc[0][col_start::col_par_cdt]

for i_candidat, candidat in enumerate(candidats):
    i_col = col_start + i_candidat*col_par_cdt + 2
    print('# colonne', i_col, ' résultats=', T2.iloc[:, i_col].values)
    df_2[candidat] = T2.iloc[:, i_col].values
#+end_src

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
fig, ax = plt.subplots(figsize=(13, 5))
k = df_2.sum()/df_2.sum().sum()
ax = k.plot.bar(ax=ax)
ax.set_xlabel('Candidat')
ax.set_ylabel('pourcentage');
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-XyHH31/figureS6GJB1.png]]

** Second order

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
import seaborn as sns

CDT_1 = "MÉLENCHON"
CDT_2 = "LE PEN"

df_12 = pd.DataFrame()
df_12[CDT_1] = df_1[CDT_1].copy()
df_12[CDT_2] = df_2[CDT_2].copy()

df_12[CDT_1] = df_12[CDT_1]/df_1.sum(axis=1)
df_12[CDT_2] = df_12[CDT_2]/df_2.sum(axis=1)

fig = plt.figure()
sns.jointplot(x=df_12[CDT_1], y=df_12[CDT_2], kind='hist', height=8);
plt.savefig(filename)
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-XyHH31/figureMfdkeO.png]]


* Simple modèle écologique

** Full mixing

On implémente le modèle en utilisant la librairie =aesara=. D'abord le modèle avec full mixing. Il n'a pas vraiment de sens ici, mais c'est le plus simple à implémenter.

#+begin_src python :session
import aesara
import aesara.tensor as at
from aesara.tensor.random import RandomStream
from aeppl import joint_logprob
from aeppl.transforms import TransformValuesOpt, SimplexTransform

second = df_2[1:].values
premier = df_1[1:].values
n_candidats_1 = premier.shape[1]
n_candidats_2 = second.shape[1]

srng = RandomStream(0)

# Model
p1_rv = srng.dirichlet(at.ones(n_candidats_1))
R1_rv = srng.multinomial(at.sum(premier, axis=1), p1_rv)

M_rv = srng.dirichlet(at.ones((n_candidats_1, n_candidats_2)))

p2_rv = srng.dirichlet(at.dot(p1_rv, M_rv))
R2_rv = srng.multinomial(at.sum(second, axis=1), p2_rv)
#+end_src

Construisons maintenant la fonction qui associe à des valeurs de paramètre le logarithme de la densité de probabilité associée au modèle.

#+begin_src python :session :results silent
p1_vv = p1_rv.clone()
p2_vv = p2_rv.clone()
R1_vv = R1_rv.clone()
R2_vv = R2_rv.clone()
M_vv = M_rv.clone()

transforms_op = TransformValuesOpt(
     {p1_vv: SimplexTransform(), M_vv: SimplexTransform(), p2_vv: SimplexTransform()}
)
logprob = joint_logprob(
    {p1_rv: p1_vv, p2_rv: p2_vv, R1_rv: R1_vv, R2_rv: R2_vv, M_rv: M_vv},
    extra_rewrites=transforms_op
)

# Compile the logprob function
logprob_fn = aesara.function((p1_vv, M_vv, p2_vv, R1_vv, R2_vv), logprob)
#+end_src

#+begin_src python :session :results output
M = np.ones((n_candidats_1, n_candidats_2-1))
p1 = np.ones(n_candidats_1 - 1)
p2 = np.ones(n_candidats_2 -1)
print(logprob_fn(p1, M, p2, premier, second))
#+end_src

#+RESULTS:
: -116199944.47430898

Compilons la fonction en utilisant le lieur aesara vers JAX, ce qui nous permettra

#+begin_src python :session
from aesara.link.jax.dispatch import jax_funcify
from aesara.graph.fg import FunctionGraph
from aeppl.opt import logprob_rewrites_db
from aesara.compile import mode
from aesara.raise_op import CheckAndRaise

@jax_funcify.register(CheckAndRaise)
def jax_funcify_Assert(op, **kwargs):
    # Jax does not allow assert whose values aren't known during JIT compilation
    # within it's JIT-ed code. Hence we need to make a simple pass through
    # version of the Assert Op.
    # https://github.com/google/jax/issues/2273#issuecomment-589098722
    def assert_fn(value, *inps):
        return value

    return assert_fn

fgraph = FunctionGraph(inputs=(p1_vv, M_vv, p2_vv, R1_vv, R2_vv), outputs=(logprob,))
mode.JAX.optimizer.optimize(fgraph)
jax_fn = jax_funcify(fgraph)
#+end_src

#+RESULTS:

#+begin_src python :session :results output
M = np.ones((n_candidats_1, n_candidats_2-1))
p1 = np.ones(n_candidats_1 - 1)
p2 = np.ones(n_candidats_2 -1)
print(jax_fn(p1, M, p2, premier, second)[0])
#+end_src

#+RESULTS:
: -116199944.47430903

We can now use BlackAJX to sample from the posterior distribution. Let us first get some initial values and specialize the logpdf:

#+begin_src python :session
def logpdf(x):
    p1, M, p2 = x
    return jax_fn(p1, M, p2, premier, second)[0]

initial_p1 = SimplexTransform().forward(p1_rv).eval()
initial_p2 = SimplexTransform().forward(p2_rv).eval()
initial_M = SimplexTransform().forward(M_rv).eval()
#+end_src

#+RESULTS:

#+begin_src python :session
logpdf((initial_p1, initial_M, initial_p2))
#+end_src

#+RESULTS:
: -111797255.93148363

#+begin_src python
import blackjax
#+end_src

*** TODO Figure out what to do in the Simplex space

This is the implementation of =SimplexTransform=.

#+begin_src python
class SimplexTransform(RVTransform):
    name = "simplex"

    def forward(self, value, *inputs):
        log_value = at.log(value)
        shift = at.sum(log_value, -1, keepdims=True) / value.shape[-1]
        return log_value[..., :-1] - shift

    def backward(self, value, *inputs):
        value = at.concatenate([value, -at.sum(value, -1, keepdims=True)], axis=-1)
        exp_value_max = at.exp(value - at.max(value, -1, keepdims=True))
        return exp_value_max / at.sum(exp_value_max, -1, keepdims=True)

    def log_jac_det(self, value, *inputs):
        N = value.shape[-1] + 1
        sum_value = at.sum(value, -1, keepdims=True)
        value_sum_expanded = value + sum_value
        value_sum_expanded = at.concatenate(
            [value_sum_expanded, at.zeros(sum_value.shape)], -1
        )
        logsumexp_value_expanded = at.logsumexp(value_sum_expanded, -1, keepdims=True)
        res = at.log(N) + (N * sum_value) - (N * logsumexp_value_expanded)
        return at.sum(res, -1)
#+end_src

** Modèle hiérarchique

Dans la version hiérarchique du modèle:
1. Chaque circonscription a ses vecteurs p1 et p2, et matrice M de transition qui lui sont propres.
2. L'information sur les transitions est partagée en donnant un prior commun au paramètre de dispersion de la distribution des matrices de transition.

Elle est assez simple à implémenter avec =aesara=.

* TODO Rappeler les résultats des deux tours
* TODO Remontrer les courbes X vs Y
* TODO Modèle full mixing pour tous les paramètres
