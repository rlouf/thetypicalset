#+TITLE: Estimer le report des voix aux présidentielles
#+DATE: <2022-06-13 Mon>

Cet article fait suite au [[https://github.com/laurentperrinet/2022-05-04_transfert-des-voix/blob/main/2022-06-08_transfert-des-voix.ipynb][travail de Laurent Perrinet]] sur les reports de voix entre le premier et le deuxième tour des élections présidentielles en 2022. La démarche de ce travail est intéressante (et autant que je sache originale) : elle consiste à prendre les résultats des élections au niveau des bureaux de vote aux deux tours, et essayer d'estimer une matrice de transition i.e. la probabilité que quelqu'un ayant voté pour X (par exemple Fabien Roussel) vote pour Y (par exemple Marine Le Pen) au second tour.

Le modèle utilisé est déterministe. Il est implémenté avec PyTorch:

#+begin_src python
import torch
from torch.utils.data import TensorDataset, DataLoader, random_split
import torch.nn.functional as F

torch.set_default_tensor_type("torch.FloatTensor")

class TransfertVoix(torch.nn.Module):
    def __init__(self, N_1er, N_2eme):#, device=None):
        super(TransfertVoix, self).__init__()
        self.lin = torch.nn.Linear(N_2eme, N_1er, bias=False)

    def forward(self, p_1):
        M = torch.softmax(self.lin.weight, axis=1)
        p_2_pred = torch.matmul(p_1, M)
        return p_2_pred
#+end_src

A première lecture des résultats et au vu du modèle ci-dessus plusieurs pistes d'amélioration me viennent en tête:
1. L'auteur montre les corrélations entre le vote Mélenchon au premier tour, et celui de Macron au second tour. Les distributions marginales sont très étalées. Je m'attend à une variabilité encore plus grande pour les candidats avec un score moindre. Cette variabilité peut avoir un effet non-négligeable sur les résultats; je suis par exemple surpris des forts reports vers Le Pen calculés pour Arthaud, Poutou et Roussel. Ce n'est pas à exclure, certes, mais je pense que l'on bénéficierait d'une approche bayésienne et bénéficier d'une marge d'erreur sur ces résultats;
2. L'hypothèse d'un report uniforme sur tout le territoire me parait également osée. On devrait envisager un modèle hiérarchique;
3. Les sondages de sortie d'urne peuvent servir pour définir le prior (hyperprior dans le cas d'un modèle hiérarchique).

#+begin_src python :session :result silent
import os
import numpy as np
import pandas as pd
#+end_src

#+RESULTS:

* Les données

On se placera ici à l'échelle de la circonscription législative. Le découpage à l'échelle du bureau de vote est intéressant, mais le but implicite de cette étude est de donner une idée des reports de voix pour le second tour des législatives 2022. J'utilise ici le code de [[https://github.com/laurentperrinet/2022-05-04_transfert-des-voix/blob/main/2022-06-08_transfert-des-voix.ipynb][Laurent Perrinet]] en le modifiant (les erreurs éventuelles sont de mon fait).

** Premier tour


#+begin_src python :session :results silent
fname = '/tmp/T1.xlsx'

if not os.path.isfile(fname):
    url = "https://www.data.gouv.fr/fr/datasets/r/1a35594a-99f2-4257-87e0-ec2f55039276"
    import urllib.request
    urllib.request.urlretrieve(url, fname)

T1 = pd.read_excel(fname)
#+end_src


#+begin_src python :session
T1.tail()
#+end_src

#+RESULTS:
:     Code du département           Libellé du département  Code de la circonscription Libellé de la circonscription Etat saisie  Inscrits  Abstentions  % Abs/Ins  Votants  % Vot/Ins  Blancs  % Blancs/Ins  % Blancs/Vot  Nuls  ...  Unnamed: 89  Unnamed: 90  Unnamed: 91  Unnamed: 92  Unnamed: 93  Unnamed: 94 Unnamed: 95 Unnamed: 96 Unnamed: 97    Unnamed: 98  Unnamed: 99  Unnamed: 100  Unnamed: 101 Unnamed: 102
: 572                  ZZ  Français établis hors de France                           7          7ème circonscription     Complet    122158        69559      56.94    52599      43.06     247          0.20          0.47   208  ...           11            M       POUTOU     Philippe          349         0.29        0.67          12           M  DUPONT-AIGNAN      Nicolas           639          0.52         1.23
: 573                  ZZ  Français établis hors de France                           8          8ème circonscription     Complet    130065       106455      81.85    23610      18.15     150          0.12          0.64   109  ...           11            M       POUTOU     Philippe          133         0.10        0.57          12           M  DUPONT-AIGNAN      Nicolas           300          0.23         1.28
: 574                  ZZ  Français établis hors de France                           9          9ème circonscription     Complet    121122        81344      67.16    39778      32.84     298          0.25          0.75   178  ...           11            M       POUTOU     Philippe          135         0.11        0.34          12           M  DUPONT-AIGNAN      Nicolas           381          0.31         0.97
: 575                  ZZ  Français établis hors de France                          10         10ème circonscription     Complet    103910        63575      61.18    40335      38.82     365          0.35          0.90   191  ...           11            M       POUTOU     Philippe          163         0.16        0.41          12           M  DUPONT-AIGNAN      Nicolas           530          0.51         1.33
: 576                  ZZ  Français établis hors de France                          11         11ème circonscription     Complet     98784        60615      61.36    38169      38.64     309          0.31          0.81   172  ...           11            M       POUTOU     Philippe          197         0.20        0.52          12           M  DUPONT-AIGNAN      Nicolas           595          0.60         1.58
:
: [5 rows x 103 columns]

#+begin_src python :session
df_1 = T1[['Nuls', 'Blancs', 'Abstentions']].copy()
T1['Code de la circonscription'] = T1['Code de la circonscription'].apply(str)
#df_1['circonscription'] = T1['Code du département'] + T1['Code de la circonscription']
df_1.head()
#+end_src

#+RESULTS:
:    Nuls  Blancs  Abstentions
: 0   393    1154        18592
: 1   352    1367        19917
: 2   290     851        20440
: 3   474    1299        19826
: 4   394     970        18766


#+begin_src python :session :results silent
col_start = 21
col_par_cdt = 7
candidats = T1.iloc[0][col_start::col_par_cdt]

for i_candidat, candidat in enumerate(candidats):
    i_col = col_start + i_candidat*col_par_cdt + 2
    print('# colonne', i_col, ' résultats=', T1.iloc[:, i_col].values)
    df_1[candidat] = T1.iloc[:, i_col].values
#+end_src


Let's check the results by plotting the distribution of votes:

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(13, 5))
k = df_1.sum()/df_1.sum().sum()
ax = k.plot.bar(ax=ax)
ax.set_xlabel('Choix 1er tour')
ax.set_ylabel('Pourcentage');
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src


#+RESULTS:
[[file:/tmp/babel-Xpsl3Y/figurec0y50O.png]]

** Deuxième tour

#+begin_src python :session :results silent
fname = '/tmp/T2.xlsx'

if not os.path.isfile(fname):
    url = "https://www.data.gouv.fr/fr/datasets/r/5eacdbc7-b1a2-440c-8eef-09c8bfb87609"
    import urllib.request
    urllib.request.urlretrieve(url, fname)

T2 = pd.read_excel(fname)
#+end_src


#+begin_src python :session
T2.tail()
#+end_src

#+RESULTS:
:     Code du département           Libellé du département  Code de la circonscription Libellé de la circonscription Etat saisie  Inscrits  Abstentions  % Abs/Ins  Votants  % Vot/Ins  Blancs  % Blancs/Ins  % Blancs/Vot  Nuls  % Nuls/Ins  % Nuls/Vot  ...  % Exp/Ins  % Exp/Vot  N°Panneau  Sexe     Nom    Prénom   Voix  % Voix/Ins  % Voix/Exp  Unnamed: 26  Unnamed: 27 Unnamed: 28 Unnamed: 29 Unnamed: 30  Unnamed: 31  Unnamed: 32
: 572                  ZZ  Français établis hors de France                           7          7ème circonscription     Complet    122145        62433      51.11    59712      48.89    1257          1.03          2.11   299        0.24        0.50  ...      47.61      97.39          1     M  MACRON  Emmanuel  53169       43.53       91.42            2            F      LE PEN      Marine        4987         4.08         8.58
: 573                  ZZ  Français établis hors de France                           8          8ème circonscription     Complet    130068       105245      80.92    24823      19.08     775          0.60          3.12   188        0.14        0.76  ...      18.34      96.12          1     M  MACRON  Emmanuel  20515       15.77       85.98            2            F      LE PEN      Marine        3345         2.57        14.02
: 574                  ZZ  Français établis hors de France                           9          9ème circonscription     Complet    121013        81608      67.44    39405      32.56    1497          1.24          3.80   342        0.28        0.87  ...      31.04      95.33          1     M  MACRON  Emmanuel  32578       26.92       86.72            2            F      LE PEN      Marine        4988         4.12        13.28
: 575                  ZZ  Français établis hors de France                          10         10ème circonscription     Complet    104829        63530      60.60    41299      39.40    1326          1.26          3.21   325        0.31        0.79  ...      37.82      96.00          1     M  MACRON  Emmanuel  31563       30.11       79.61            2            F      LE PEN      Marine        8085         7.71        20.39
: 576                  ZZ  Français établis hors de France                          11         11ème circonscription     Complet     98707        58675      59.44    40032      40.56    1358          1.38          3.39   291        0.29        0.73  ...      38.89      95.88          1     M  MACRON  Emmanuel  31137       31.54       81.12            2            F      LE PEN      Marine        7246         7.34        18.88
:
: [5 rows x 33 columns]

#+begin_src python :session
df_2 = T2[['Nuls', 'Blancs', 'Abstentions']].copy()
T2['Code de la circonscription'] = T2['Code de la circonscription'].apply(str)
#df_1['circonscription'] = T1['Code du département'] + T1['Code de la circonscription']
df_2.head()
#+end_src

#+RESULTS:
:    Nuls  Blancs  Abstentions
: 0  1229    4020        20298
: 1  1189    4430        23236
: 2   880    3478        23138
: 3  1324    4082        21870
: 4  1253    3792        21026

#+begin_src python :session :results silent
col_start = 21
col_par_cdt = 7
candidats = T2.iloc[0][col_start::col_par_cdt]

for i_candidat, candidat in enumerate(candidats):
    i_col = col_start + i_candidat*col_par_cdt + 2
    print('# colonne', i_col, ' résultats=', T2.iloc[:, i_col].values)
    df_2[candidat] = T2.iloc[:, i_col].values
#+end_src

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
fig, ax = plt.subplots(figsize=(13, 5))
k = df_2.sum()/df_2.sum().sum()
ax = k.plot.bar(ax=ax)
ax.set_xlabel('Candidat')
ax.set_ylabel('pourcentage');
plt.savefig(filename, bbox_inches="tight")
filename
#+end_src

#+RESULTS:
[[file:/tmp/babel-Xpsl3Y/figureNSSmsy.png]]

** Second order

#+begin_src python :session :results file :exports both :var filename=(org-babel-temp-file "figure" ".png")
import seaborn as sns

CDT_1 = "MÉLENCHON"
CDT_2 = "LE PEN"

df_12 = pd.DataFrame()
df_12[CDT_1] = df_1[CDT_1].copy()
df_12[CDT_2] = df_2[CDT_2].copy()

df_12[CDT_1] = df_12[CDT_1]/df_1.sum(axis=1)
df_12[CDT_2] = df_12[CDT_2]/df_2.sum(axis=1)

fig = plt.figure()
sns.jointplot(x=df_12[CDT_1], y=df_12[CDT_2], kind='hist', height=8);
plt.savefig(filename)
filename
#+end_src

#+RESULTS:
[[file:]]


* Modèle simple: une matrice de transition pour toute la France

On implémente le modèle en utilisant la librairie =aesara=. D'abord le modèle avec full mixing:

#+begin_src python :session
import aesara.tensor as at
from aesara.tensor.random import RandomStream
from aeppl import joint_logprob
from aeppl.transforms import TransformValuesOpt, SimplexTransform

second = df_2[1:].values
premier = df_1[1:].values
n_candidats_1 = premier.shape[1]
n_candidats_2 = second.shape[1]

srng = RandomStream(0)

# Oberved variables
R1_vv = at.matrix("R1", "int64")
p1_at = at.nnet.basic.softmax(R1_vv, axis=1)

M_rv = srng.dirichlet(at.ones((n_candidats_1, n_candidats_2)))
M_rv.name = "M"
M_vv = at.matrix("M")

p2_at = at.dot(p1_at, M_rv)
R2_rv = srng.multinomial(at.sum(second, axis=1), p2_at)
R2_vv = at.matrix("R2", "int64")

# We apply the simplex transform to Dirichlet random variables
transforms_op = TransformValuesOpt(
     {M_vv: SimplexTransform()}
)
logprob = joint_logprob(
    {R2_rv: R2_vv, M_rv: M_vv},
    extra_rewrites=transforms_op
)
logprob_fn = aesara.function((M_vv, R1_vv, R2_vv), logprob)
#+end_src

#+RESULTS:

#+begin_src python :session
M = M_rv.eval()
print(logprob_fn(M, premier, second))
#+end_src

#+RESULTS:

#+begin_src python :session
import pymc3 as pm

with pm.Model() as single_matrix:

    p1 = pm.Dirichlet("p1", np.ones(n_candidats_1))
    N_c1 = pm.Multinomial("N1", premier[1,:].sum(), p1, observed=premier[1,:])
    p2 = pm.Dirichlet(f"p2", np.ones(n_candidats_2))
    N = pm.Multinomial(f"N2", second[1,:].sum(), p2, observed=second[1,:])
#+end_src

#+RESULTS:

#+begin_src python :session
with single_matrix:
    trace = pm.sample()
#+end_src
#+RESULTS:

#+begin_comment
Comme le nombre d'inscrit diffère entre les deux tours, on devrait plutôt avoir un modèle de type Dirichlet/Dirichlet.
#+end_comment



* TODO Rappeler les résultats des deux tours
* TODO Montrer les courbes Vote X premier tour vs vote Y second tour (and show distributions)
* TODO
