#+TITLE: Drafts

Current drafts.

- [[file:python-kanren.org][Understanding miniKanren with Python]]
- [[file:mnist_bayesian_mlp.org][MNIST and a Bayesian 3-layer MLP]]
- [[file:presidentielles-report-voix.org][Report des voix aux pr√©sidentielles]]
- [[file:understand-wavefunction-collapse.org][Wavefunction collapse and miniKanren]]
- [[file:solve-spelling-bee-kanren.org][Solve the Spelling Bee with miniKanren]]
- [[file:sparse-regression-aesara.org][Sparse regression in aesara]]
- [[file:introducing-birdland.org][Introducing Birdland]]
- [[file:aesara-target-jax-ir.org]]
- [[file:centered-non-centered.org][AeMCMC rewrites]]

(This is not automatically updated)

* On finding the right representation for things

Aesara allows to model:
- [[id:0b066c70-be98-4a81-8565-d6da26924416][Mixture models in Aesara]]
- [[id:41dbc34a-2004-4b65-99fc-cc73c0aeef76][Hidden Markov Models in Aesara]]
- Bayesian non-parametrics

Without any workaround. You really just write the model as it is.

* On emacs

/Caution:/ This post may be written with the naivety of someone who has just discovered a tool, although it has been one year.

The secret to understanding code is to simply /use it/, play with it. Notebooks are great for that. Original workflow was to have everything in a script, execute the script OR look into a REPL. Notebooks allowed to develop a /narrative/ around the code. A form of literate pogramming.

I felt I was held by a lot of friction with notebooks, which probably made me test thing a lot less than I should have:
- You have to start a new session in the browser;
- /Searching/ notebooks is hard;
- You don't have access to vim keybindings, which quickly gets frustrating;
- You don't easily have access
- Versioning / publishing is a pain because of the JSON format;

It is funny, looking back at the developement of Jupyter and its ecosystem that they tried to re-produce everything that was already available with org-babel:
- Publishing to LaTeX, HTML, etc.
- Support for multiple languages (JUliaPYthon)
- Versioning (jupytext)

Emacs is a great operating system. It may be the greatest operating system ever developed for people who only work with text. It even comes bundled with the best text editor (vim). But two things:

1. Relatively few people use emacs. Even after 10 years of tinkering with Vim I was hesitant to switch to emacs, which feels quite terrifying for most people.
2. People keep re-inventing the wheel, namely features that have been in emacs for a long time.

I am going to leave my elitist-bs aside for a second: I have to admit that people are **right** to be scared about emacs. It tooks me weeks to get the same level of productivity as I had with Vim before, many months before I start recouping the time spent. That's *a lot of time*: people are smart, but they have a job, a family, other interests in life. It should not be /hard/ to use emacs.

The philosophy so far has been to bring people to emacs' level. Some cult-ish BS where everyone makes everyong else believe that you need to /deserve/ emacs if you want to use it, and emacs should NOT be ternished by some n00b graphical interface and primitive text editing experience.

People with a lot of good will (the best) will take people's hand and write lengthy tutorials about how you can get to a point where you can be slightly

Emacs should come with a distribution that does the same thing as other text editors: the interface is simple, but bells and whistles are available should you need them.

I think emacs is very powerful, and it is a waste of everyone's time that we haven't made easy-to-use applications on top of this text-processing machine.
