:PROPERTIES:
:ID:       e18d689a-392a-407a-941a-f0ad2d2dc43e
:END:
#+title: AePPL

AePPL is a set of tools to build A[e]PPL with [[id:5a5e87b1-558c-43db-ad38-32a073b10351][Aesara]]. The code is available [[https://github.com/aesara-devs/aeppl][on Github]]. AePPL takes any Aesara graph that contains [[id:2e41e200-be7a-482b-8cfe-d0d67df26920][random variables]], such as:

#+begin_src python :results output :session
import aesara
import aesara.tensor as at

srng = at.random.RandomStream(0)

mu_rv = srng.normal(0, 1)
sigma_rv = srng.halfcauchy(1)
x_rv = srng.normal(mu_rv, sigma_rv)

fn = aesara.function([], [mu_rv, sigma_rv, x_rv])
samples = fn()
print(samples)
#+end_src

#+RESULTS:
: [array(1.44369095), array(2.80017179), array(4.08173001)]

and constructs graphs that compute the joint log-density:

#+begin_src python :session :results output
import aeppl

logprob, (mu_vv, sigma_vv, x_vv) = aeppl.joint_logprob(mu_rv, sigma_rv, x_rv)
fn = aesara.function([mu_vv, sigma_vv, x_vv], logprob)
print(fn(*samples))
#+end_src

#+RESULTS:
: -6.249746713886573

Or conditional log-densities:

#+begin_src python :session :results output
import aeppl

logprobs, (mu_vv, sigma_vv, x_vv) = aeppl.conditional_logprob(mu_rv, sigma_rv, x_rv)
fn = aesara.function([mu_vv, sigma_vv, x_vv], logprobs[x_rv])
print(fn(*samples))
#+end_src

#+RESULTS:
: -2.3923945677716345

AePPL is designed to support every model that is mathematically well-defined, and provides support for the following:

- [[id:caa7788c-f2ce-42ba-a712-73fd69c93a1d][Transformed variables]]
- [[id:19a28994-247b-40bf-8d9f-55b65edab3f1][Convolutions]]
- [[id:c57dd926-5e8a-46c0-8af2-44e0dde4beb7][Elements of multi-dimensional random variables]]
- [[id:c40d2cd2-cd16-4e9c-baab-93e368eb3c0e][Mixtures]]
- [[id:b67c225f-72bc-434d-89fc-3a8d7e1d9859][Variables defined by a loop]]
- [[id:8ab6423e-5ec1-489c-919b-c41b84ee8715][Marginalization]]
- [[id:44a13f71-9216-41af-88b9-25459ef40e83][Algebra of random variables]]
