:PROPERTIES:
:ID:       ee2b16f2-0d64-4172-90bb-fa3f6dab3eac
:END:
#+title: Kaeras


Kaeras is a deep-learning API that sits on top of Aesara. It is heavily inspired by [[https://keras.io][Keras]], which used to be built on top of Theano, but now on top of Tensorflow 2.

* Minimum Viable Project

A minimum viable library could be to be able to reproduce Keras' documentation' examples. For instance the MNIST convnet:

#+begin_src python
model = keras.Sequential(
    [
        keras.Input(shape=input_shape),
        layers.Conv2D(32, kernel_size=(3, 3), activation="relu"),
        layers.MaxPooling2D(pool_size=(2, 2)),
        layers.Conv2D(64, kernel_size=(3, 3), activation="relu"),
        layers.MaxPooling2D(pool_size=(2, 2)),
        layers.Flatten(),
        layers.Dropout(0.5),
        layers.Dense(num_classes, activation="softmax"),
    ]
)
#+end_src

Which requires the implementation of the following:

- layers.Dense
- layers.Activation
- layers.BatchNormalization
- layers.Conv2D
- layers.MaxPooling2D
- layers.Dropout
- layers.Flatten

* Graph rewriting

We can perform rewriting at the layer semantic level. For instance, the [[https://github.com/uwplse/tensat][TENSAT]] library adds equality saturation to the [[https://github.com/jiazhihao/TASO][TASO]] library. There are a list of rewrites that operate on a so-called /layer algebra/. Here are a few examples:

#+begin_src ascii
matmul(matmul(input_1,input_4),input_5)==matmul(input_1,matmul(input_4,input_5))
conv2d(1,1,0,2,ewadd(input_12,ewadd(input_10,input_11)),ewadd(input_12,ewadd(input_10,input_11)))==conv2d(1,1,0,2,ewadd(input_11,ewadd(input_10,input_12)),ewadd(input_11,ewadd(input_10,input_12)))
poolavg(3,3,1,1,0,input_8)==conv2d(1,1,0,0,input_8,Cpool(3,3))
relu(input_8)==conv2d(1,1,0,2,input_8,Iconv(3,3))
#+end_src
