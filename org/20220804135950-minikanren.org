:PROPERTIES:
:ID:       f4cf39be-6c6a-4a9d-804a-3879a98177bc
:END:
#+title: miniKanren

[[http://minikanren.org][miniKanren]] is a DSL for [[id:f9dc079d-0b83-4ab5-afc4-c3a7045fb6a9][relational programming]]. It can be used to /declare/ the relations between the parameters of a problem, and let the computer find the values of the parameters that satisfy these relations. While the original implementation is in Scheme, I will be focusing in these notes on [[https://github.com/pythological/kanren][an implementation]] in [[id:5cbd01f8-88bb-4826-b82d-125ad3c759eb][Python]].

* Learn

The goal is to fully understand the python implementation. Here's a diagram that roughly summarizes what I need to understand:

#+attr_html: :width 100%
[[file:img/kanren-learning.png]]

** TODO [[id:5458738d-44ab-4976-87cd-d668905fbb96][Unification]]
** TODO [[id:f81ea2e9-76e9-4e6a-954d-eea005a18f96][walko]]
** TODO [[id:833af8d8-dc08-49f3-8ed9-cd12aa5c57bb][condp]]

* Projects

** Term rewriting

I am using miniKanren in the following contexts/projects:
- In [[https://github.com/aesara-devs/aemcmc][AeMCMC]] to walk through the possible parametrizations of a probabilistic model to find the most efficient sampler;
- In [[https://github.com/aesara-devs/aesara][Aesara]] to simplify computation graphs.

** Solving puzzles

Puzzles are a good introduction to relational programming: they have a fixed number of rules, were designed to be solved by humans.

- To solve the Zebra riddle ([[file:blog/zebra-riddle-kanren.org][blog post]]).
- To solve Sudoku puzzles ([[file:blog/solve-sudokus-kanren.org][blog post]])
  - The solver returns correct solution
  - /Hangs for simple grids/. [[id:833af8d8-dc08-49f3-8ed9-cd12aa5c57bb][condp]] should help with this.
- To solve the NYT's [[https://www.nytimes.com/puzzles/spelling-bee][Spelling Bee]] ([[file:blog/drafts/solve-spelling-bee-kanren.org][draft]])
- A [[https://www.nytimes.com/games/wordle/index.html][Wordle]] solver (TODO)
- [[http://www.hakank.org/picat/miracle_sudoku.pi][Miracle Sudoku]] (TODO)
- Can we solve chess problems? Problems give a position, an outcome, and the rules of the game are well known.

** Bitmaps generation

- To connect to points with a line
- To implement a declarative version of the [[id:b35260a8-8ef4-4f08-ad22-dc477c6311f0][WaveFunctionCollapse algorithm]]
  - I get a [[https://github.com/pythological/kanren/issues/59][RecursionError]] for > 1000 pixels (we will need [[id:12cfb00f-633f-4ca5-9872-0fad6fb24cc6][Trampoline Evaluation]])
  - The memory usage increases very quickly
  - Performance needs to be improved
- To implement the [[id:7209f257-52a4-43b4-bfcc-f87279bf2d45][MarkovJunior algorithm]]
  - I need to understand [[id:f81ea2e9-76e9-4e6a-954d-eea005a18f96][walko]]
  - Same performance concerns as with the [[id:b35260a8-8ef4-4f08-ad22-dc477c6311f0][WaveFunctionCollapse algorithm]]

** Gardening

Gardening is typically an area where we are trying to find solutions that satisfy some constraints. We could definitely use miniKanren to plan garden if the search scaled : we can enter informations about the different plants in a database, then some information about the garden we are trying to design, and look at the combinations that come out of it.

* References

- The Reasoned Schemer (2nd ed.)
- [[https://dash.harvard.edu/bitstream/handle/1/41307116/tr-02-19.pdf?sequence=1&isAllowed=y#page=5][Proceedings of the 2019 Workshop on miniKanren and relational programming]]
    including /towards a miniKanren with fair search strategies/
- "Neural Guided Constraint Logic Programming for Program Synthesis" ([[https://proceedings.neurips.cc/paper/2018/file/67d16d00201083a2b118dd5128dd6f59-Paper.pdf][paper]])
- "A surprisingly competitive conditional operator" ([[https://www.brinckerhoff.org/scheme2018/papers/Boskin_Ma_Christiansen_Friedman.pdf][paper]])
- "$\mu\text{Kanren}$: a functional core for relational programming$" ([[http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf][paper]] [[https://github.com/jasonhemann/microKanren][repo]])
- Faster miniKanren ([[https://github.com/michaelballantyne/faster-minikanren][repo]])
- Temporal logic programming with miniKanren ([[https://github.com/nathanielrb/ftmicroKanren][repo]])
- cKanren: miniKanre with constraints ([[http://www.schemeworkshop.org/2011/papers/Alvis2011.pdf][paper]])
- "A unified approach to solving 7 programming problems" ([[https://dl.acm.org/doi/pdf/10.1145/3110252][paper]])
- AskHN: Why logic programming is not widely used in the industry? ([[https://news.ycombinator.com/item?id=29521109][post on HN]])
- Clojure's [[https://github.com/clojure/core.logic][core.logic]] is a miniKanren implementation in Clojure.
- "A relational language - Parasat" ([[https://davidpratten.com/2019/03/18/a-logic-language-parasat/][post]])
  The authors starts from the logic programming language Picat and ends up suggesting something that's close to miniKanren. We also learn that William Byrd recommended the autho tries faster-miniKanren.
