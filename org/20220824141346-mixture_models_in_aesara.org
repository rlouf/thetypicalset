:PROPERTIES:
:ID:       0b066c70-be98-4a81-8565-d6da26924416
:END:
#+title: Mixture models in Aesara

Probabilistic Programming Languages in Python ask you to use a ad-hoc =Mixture= distribution object to build mixture distributions. In [[id:5a5e87b1-558c-43db-ad38-32a073b10351][Aesara]] you just tell it like it is:

#+begin_src python :session :results output
import aesara
import aesara.tensor as at
import numpy as np

srng = at.random.RandomStream(0)

loc = np.array([-1, 0, 1, 2])
N_rv = srng.normal(loc, 1.)

p = np.array([0.2, 0.3, 0.1, 0.4])
I_rv = srng.categorical(p)

Y_rv = N_rv[I_rv]

sample_fn = aesara.function((), Y_rv)
print(sample_fn())
#+end_src

#+RESULTS:
: 2.0058770404050943

And you can easily build the logprob graph with [[id:e18d689a-392a-407a-941a-f0ad2d2dc43e][AePPL]]:

#+begin_src python :session :results output
from aeppl import joint_logprob

y_vv = Y_rv.clone()
i_vv = I_rv.clone()
logprob = joint_logprob({Y_rv: y_vv, I_rv: i_vv})

logprob_fn = aesara.function((y_vv, i_vv), logprob)
print(logprob_fn(10, 0))
#+end_src

#+RESULTS:
: -63.02837644563878

It would be nice if we were able to [[id:630773fc-fe6e-4a2b-a191-2c984c27f963][marginalize over discrete parameters]] with AePPL; we do not care about posterior distribution of =I_rv=.
