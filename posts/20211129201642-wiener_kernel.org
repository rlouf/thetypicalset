:PROPERTIES:
:ID:       dc211cf2-78b4-4269-91e8-fc88fb49def5
:END:
#+title: Wiener kernel
#+PROPERTY: header-args:latex :results raw replace :exports results
#+filetags: :inprogress:public:

The Wiener kernel defines a non-stationary [[id:f2d80a0e-47f7-4531-a654-8343c72dd962][gaussian process]], the Wiener process:

#+begin_src latex
\begin{equation*}
\displaystyle
K(x, x') = \min(x, x')
\end{equation*}
#+end_src

#+RESULTS:
\begin{equation*}
\displaystyle
K(x, x') = \min(x, x')
\end{equation*}

It is convenient to model /time-series/. It is the limit as $n \rightarrow \infty$ of a random walk of length $n$ (cite:rasmussen2003 p213). An interesting variant is the /brownian bridge/ obtained by conditioning $X(t_0)=0$ (cite:grimmett2020 p534).

#+begin_src python :session :exports none
import numpy as np
from matplotlib import pyplot as plt

def kernel(x1, x2):
    return np.min(x1-x2)
#+end_src

#+RESULTS:

The parameter $l$ is the characteristic lengthscale of the process. As one can see on the figure below, the larger the value of $l$ the "further" the kernel takes non-negligible values.

#+begin_src python :session :results file :exports results
xx, yy = np.meshgrid(np.linspace(0, 10, 100), np.linspace(0, 10, 100))
values = kernel(xx.ravel(), yy.ravel()).reshape(xx.shape)

fig, ax = plt.subplots(figsize=(6,6))
ax.pcolormesh(xx, yy, values, cmap=plt.cm.RdBu_r)
plt.tight_layout()

fname = f"images/kernel-wiener-heatmap.png"
plt.savefig(fname)
fname
#+end_src

#+RESULTS:
[[file:]]

* TODO Show that distribution is not stationary (mean) :noexport:
